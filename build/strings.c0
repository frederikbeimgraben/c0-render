#use <string>
#use <conio>

/*
Ich empfehle keinem, Code von hier für die Uni-Aufgaben zu kopieren, da:
  -  Ihr sowieso einen Plagiatsvorwurf bekommt.
  -  Der Code hier bei weitem nicht die beste Lösung für die Probleme auf den ÜBs ist.
  -  Ihr dann offiziell ein ***** seid.
*/

// Replaces all occurences of a given `char o` with `char r` in the `string s`
string replace(string s, char o, char r) {
    char[] carr = string_to_chararray(s);
    for (int i = 0; i < string_length(s); i++) {
        carr[i] = carr[i] == o ? r : carr[i];
    }
    return string_from_chararray(carr);
}

// Replaces all occurences of a given `string o` with `char r` in the `string s`
string replace_string(string s, string o, string r) {
    string out = "";
    char[] carr = string_to_chararray(s);
    for (int i = 0; i < string_length(s); i++) {
        bool match = carr[i] == string_to_chararray(o)[0];
        if (string_length(o) + i <= string_length(s)) {
            for (int c = 1; c < string_length(o); c++) {
                match = match && carr[i+c] == string_to_chararray(o)[c];
            }
        } else {
            match = false;
        }
        if (match) {
            out = string_join(out, r);
            i += string_length(o) - 1;
        } else {
            out = string_join(out, string_fromchar(carr[i]));  
        }
    }
    return out;
}

// Removes all occurences of a given `char o` in the `string s`
string remove(string s, char r) {
    return replace_string(s, string_fromchar(r), "");
}

// Multiplies a given `char c` by `int n` and returns a `string`. (e.g.: `mult_char('+', 5) -> "+++++"`)
string mult_char(char c, int n) {
    string o = "";
    for (int i = 0; i < n; i++) {
        o = string_join(o, string_fromchar(c));
    }
    return o;
}

//////////// String Alignment ////////////

// Multiplies a given `string s` by `int n` and returns a `string`. (e.g.: `mult_string("foo", 2) -> "foofoo"`)
string mult_string(string s, int n) {
    string o = "";
    for (int i = 0; i < n; i++) {
        o = string_join(o, s);
    }
    return o;
}

// Aligns `string s` right to a width of `int l` characters with `char j` as fill character
string rjust(string s, int l, char j) {
    if (string_length(s) >= l)
        return s;
    return string_join(mult_char(j, l - string_length(s)), s);
}

// Aligns `string s` left to a width of `int l` characters with `char j` as fill character
string ljust(string s, int l, char j) {
    if (string_length(s) >= l)
        return s;
    return string_join(s, mult_char(j, l - string_length(s)));
}

// Aligns `string s` centered to a width of `int l` characters with `char j` as fill character
string center(string s, int l, char j) {
    if (string_length(s) >= l)
        return s;
        
    if ((string_length(s) - l) % 2 != 0)
        return string_join(center(s, l-1, j), string_fromchar(j));
        
    return string_join(mult_char(j, (l - string_length(s))/2), string_join(s, mult_char(j, (l - string_length(s))/2)));
}


int occurences(string s, char c) {
    int o = 0;
    for (int i = 0; i < string_length(s); i++) {
        o += string_charat(s, i) == c ? 1 : 0;
    }
    return o;
}

string[] split(string s, char c, int* l) {
    string buffer = "";
    string[] res = alloc_array(string, occurences(s, c) + 1);
    *l = occurences(s, c) + 1;
    int rp = 0;
    int sl = string_length(s);
    for (int i = 0; i < sl; i++) {
        if (string_charat(s, i) == c) {
            res[rp] = buffer;
            buffer  = "";
            rp++;
        } else {
            string current = string_fromchar(string_charat(s, i));
            buffer = string_join(buffer, current);
            if (i == sl - 1) {
                res[rp] = buffer;
                buffer  = "";
            }
        }
    }
    return res;
}