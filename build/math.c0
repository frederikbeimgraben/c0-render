#use <dub>

typedef dub double;

int pow_n_int(int x, int n) {
    int r = 1;
    for (int i = 0; i < n; i++) {
        r *= x;
    }
    return r;
}

double DBL_EPSILON() {
    return ddiv(itod(1), itod(100000));
}

double dfloat(int x, int exp) {
    return ddiv(itod(x), itod(pow_n_int(10, exp)));
}

double pow_n(double x, int n) {
    double res = dfloat(1,0);
    for (int i = 0; i < n; i++)
        res = dmul(res, x);
    return res;
}

double dabs(double x) {
    return dless(x, itod(0)) ? dmul(x, itod(-1)) : x;
}

bool equal(double a, double b) {
    return a == b;
}

double sqrt(double x) {
    double sqrt = ddiv(x, itod(2));
    double temp = itod(0);
    while (
        dless(
            DBL_EPSILON(),
            dsub(dabs(pow_n(sqrt, 2)), dabs(x))
            )
    ) {
        temp = sqrt;
        sqrt = ddiv(dadd(ddiv(x, temp), temp), itod(2));
    }
    return sqrt;
}

double root_n(double x, int n) {
    double d = itod(1);
    double r = itod(1);
    if (equal(x, itod(0))) {
        return itod(0);
    } 
    if (n == 0) {
        return itod(1);
    }
    while (
        dless(
            DBL_EPSILON(),
            dabs(dsub(dabs(pow_n(r, n)), dabs(x)))
            )
    ) {
        d = ddiv(
            dsub(
                ddiv(
                    x,
                    pow_n(
                        r,
                        n - 1
                    )
                ),
                r
            ),
            itod(n)
        );
        r = dadd(d, r);
    }
    return r;
}

int dabs_n(int x) {
    return x < 0 ? -x : x;
}

// int GCD(int n, int d)
// {
// 	n = dabs_n(n);
// 	d = dabs_n(d);
// 	int t;

//     if ( d == 0 ) 
//         return n;

//     else
//         while ( d != 0 )
//         {
//             t = d;
//             d = n % d;
//             n = t;
//         }

//         return n;
// }

// int log10(double x) {
//     int e = 0;
//     double d = x;
//     while (dless(x, itod(1)) ? dless(d, itod(10)) : dless(itod(10), d) || d == itod(10)) {
//         d = dless(x, itod(10)) ?  dmul(d, itod(10)) : ddiv(d, itod(10));
//         e += dless(x, itod(10)) ? -1 : 1;
//     }
//     return e;
// }

// void reduce(int* n, int* d)
// {
// 		int gcd = GCD(*n, *d);
// 		*n /= gcd;
// 		*d /= gcd;
// }
