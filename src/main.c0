#use "shader.c0"
#use "image.c0"
#use "camera.c0"
#use <img>
#use "drand.c0"
#use "renderer.c0"

int main() {
    int sn = 7;
    object[] s = alloc_array(object, sn);
    scene c = Prism(
        iVector(0, 0, 0),
        iVector(1, 0, 1), // Position
        iVector(1, 0,-1), // Position
        iVector(0, 1, 0), // Position
        Color(255, 255, 255, 255), // Color
        dfloat(1, 0), // Reflection amount
        1, // Material Type: 1 -> Metallic
        dfloat(0, 1) // Fuzzyness
    );
    s[0] = Sphere(
        dfloat(0, 1),
        Vector(dfloat(5, 1), dfloat(7, 1), dfloat(5, 1)),
        Color(32, 32, 255, 255),
        dfloat(5, 1),
        0,
        dfloat(5, 1)
    );
    s[1] = Sphere(
        dfloat(0, 1),
        Vector(dfloat(2, 1), dfloat(-16, 1), dfloat(-2, 1)),
        Color(32, 255, 32, 255),
        dfloat(9, 1),
        1,
        dfloat(3, 1)
    );
    s[2] = Sphere(
        dfloat(0, 0),
        iVector(0, 0, -1),
        Color(255, 32, 32, 255),
        dfloat(9, 1),
        1,
        dfloat(0, 1)
    );

    int width = 1000;

    s[3] = Triangle(
        iVector( 0,  0,  0), // Position
        iVector(-0, -4,  0), // Position
        iVector(-3, -4, -3), // Position
        Color(255, 255, 255, 255),
        dfloat(10, 1),
        1,
        dfloat(0, 0)
    );
    s[4] = Triangle(
        iVector( 0,  0,  0), // Position
        iVector(-0, -4,  0), // Position
        iVector( 3, -4, -3), // Position
        Color(255, 255, 255, 255),
        dfloat(10, 1),
        1,
        dfloat(0, 0)
    );

    s[5] = Triangle(
        iVector( 0,  0,  0), // Position
        iVector(-3, -4, -3), // Position
        iVector(-3, -0, -3), // Position
        Color(255, 255, 255, 255),
        dfloat(10, 1),
        1,
        dfloat(0, 0)
    );
    s[6] = Triangle(
        iVector( 0,  0,  0), // Position
        iVector( 3, -4, -3), // Position
        iVector( 3, -0, -3), // Position
        Color(255, 255, 255, 255),
        dfloat(10, 1),
        1,
        dfloat(0, 0)
    );

    scene scn = c; // Scene(s, sn);

    image_t backg = image_load("scenes/map.png");
    scn->bgw = image_width(backg);
    scn->bgh = image_height(backg);
    scn->bg = pixel_matrix(image_data(backg), scn->bgh, scn->bgw);
    
    camera cam = Camera(
        iVector(0,0,6), 
        iVector(-2, -2, 4), 
        iVector(4, 0, 0), 
        iVector(0, 4, 0)
    );
    /******/
    image_save(Render(scn, 32, 512, 512, cam, 32), "out.png");
    return 0;
}
