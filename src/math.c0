#use <dub>
#use <conio>

typedef dub double;

int pow_n_int(int x, int n) {
    int r = 1;
    for (int i = 0; i < n; i++) {
        r *= x;
    }
    return r;
}

double DBL_EPSILON() {
    return ddiv(itod(1), itod(100000));
}

double dfloat(int x, int exp) {
    return ddiv(itod(x), itod(pow_n_int(10, exp)));
}

double pow_n(double x, int n) {
    double res = dfloat(1,0);
    for (int i = 0; i < n; i++)
        res = dmul(res, x);
    return res;
}

double dabs(double x) {
    return dless(x, itod(0)) ? dmul(x, itod(-1)) : x;
}

bool equal(double a, double b) {
    return a == b;
}



double root_n(double x, int n) {
    double d = itod(1);
    double r = itod(1);
    if (equal(x, itod(0))) {
        return itod(0);
    } 
    if (n == 0) {
        return itod(1);
    }
    while (
        dless(
            DBL_EPSILON(),
            dabs(dsub(dabs(pow_n(r, n)), dabs(x)))
            )
    ) {
        d = ddiv(
            dsub(
                ddiv(
                    x,
                    pow_n(
                        r,
                        n - 1
                    )
                ),
                r
            ),
            itod(n)
        );
        r = dadd(d, r);
    }
    return r;
}

double sqrt(double x) {
    return root_n(x, 2);
}

int dabs_n(int x) {
    return x < 0 ? -x : x;
}

// int GCD(int n, int d)
// {
// 	n = dabs_n(n);
// 	d = dabs_n(d);
// 	int t;

//     if ( d == 0 ) 
//         return n;

//     else
//         while ( d != 0 )
//         {
//             t = d;
//             d = n % d;
//             n = t;
//         }

//         return n;
// }

// int log10(double x) {
//     int e = 0;
//     double d = x;
//     while (dless(x, itod(1)) ? dless(d, itod(10)) : dless(itod(10), d) || d == itod(10)) {
//         d = dless(x, itod(10)) ?  dmul(d, itod(10)) : ddiv(d, itod(10));
//         e += dless(x, itod(10)) ? -1 : 1;
//     }
//     return e;
// }

// void reduce(int* n, int* d)
// {
// 		int gcd = GCD(*n, *d);
// 		*n /= gcd;
// 		*d /= gcd;
// }

double factorial(int x)
{
    double sum = itod(1);
    for(int i=1;i<=x;i++)
    {
        sum = dmul(sum, itod(i));
    }
    return sum;
}

double sin(int z)
{
    int i=1;
    double value;
    double val2;
    double val3;
    double sum = itod(0);
    for(i=1; i<33; i+=2)
    {
        val2 = pow_n(itod(z), i);
        val3 = factorial(i);
        value = ddiv(val2, val3);
        if(((i-1)/2)%2!=0){
            sum = dsub(sum, value);    //((power(x,i))/factorial(i));
        }else
        {
            sum = dadd(sum, value);
        }
    }
    return sum;
}

double PI() {
    return dfloat(314159265, 8);
}

double mPI(int x) {
    return dmul(PI(), itod(x));
}

double dPI(int x) {
    return ddiv(PI(), itod(x));
}

double ddPI(double x) {
    return ddiv(PI(), x);
}

double dsgn(double x) {
    return ddiv(x, dabs(x));
}

bool sgn(double x) {
    return !dless(ddiv(x, dabs(x)), itod(0));
}

bool sgnp(double x) {
    return dless(itod(0), ddiv(x, dabs(x)));
}

bool snll(double x) {
    return x == itod(0);
}

double atan(double x) {
    if (!(dless(x, itod(1)) || x == itod(1)))
        return dsub(dPI(2), atan(ddiv(itod(1), x)));
    if (dless(x, itod(-1)))
        return dmul(dsub(dPI(2), atan(ddiv(itod(1), dabs(x)))), itod(-1));
    double A = dfloat(28086, 5);
    return ddiv(
        x,
        dadd(
            itod(1),
            dmul(
                A, 
                pow_n(x, 2)
            )
        )
    );
}

double norm_atan2(double y, double x) {
    double rad = itod(0);
    if (sgnp(x)) {
        rad = atan(ddiv(y, x));
    } else if (!sgn(x) && sgn(y)) {
        rad = dadd(atan(ddiv(y, x)), PI());
    } else if (!sgn(x) && !sgn(y)) {
        rad = dsub(atan(ddiv(y, x)), PI());
    } else if (sgnp(y)) {
        rad = ddiv(PI(), itod(2));
    } else if (!sgn(y)) {
        rad = ddiv(PI(), itod(-2));
    } else {
        rad = itod(0);
    }
    return ddiv(
        dadd(rad, PI()),
        mPI(2)
    );
}

double acos(double x) {
    return (
        dadd(
            dfloat(157079632, 8),
            dsub(
                dmul(
                    dfloat(-6981317, 7),
                    pow_n(x, 2)
                ),
                dfloat(87266462, 8)
            )
        )
    );
}

double pyth(double a, double b) {
    return sqrt(dadd(pow_n(a, 2), pow_n(b, 2)));
}

int maintest() {
    // for (int i = -200; i < 201; i++) {
    //     print_dub(atan(dfloat(i, 2)));
    // }
    print_dub(atan(dfloat(-15, 0)));
    return 0;
}
