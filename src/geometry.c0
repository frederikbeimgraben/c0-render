#use "math.c0"
#use "vector.c0"
#use "color.c0"

typedef struct Surface*   surface;
typedef struct Object*    object;
typedef struct Material*  material;
typedef struct HitRecord* hitrecord;
typedef struct Scene*     scene;

struct Surface {
    vector a;
    vector b;
    vector c;
};

struct Material {
    color  tint;
    double reflection;
    double fuzz;
    int    type;
};

struct HitRecord {
    double t;
    vector n;
    vector p;
};

struct Object {
    // Position/Geometry
    vector pos1;
    vector pos2;
    vector pos3;
    double mod;
    int obj_type;
    // Material
    material surface;
    // Last Hit
    hitrecord hit;
}; 

struct Scene {
    object[] primitives;
    int n_primitives;
    object* last_hit;
    int[][] bg;
    int bgw;
    int bgh;
};

// SPHERE //
object Sphere(double radius, vector position, color tint, double reflection, int mat_type, double fuzz) {
    object result  = alloc(struct Object);
    result->mod  = radius;
    result->pos1 = position;
    result->obj_type = 0;
    // Material
    result->surface = alloc(struct Material);
    result->surface->tint = tint;
    result->surface->type = mat_type;
    result->surface->fuzz = fuzz;
    result->surface->reflection = reflection;
    // Hit
    result->hit = alloc(struct HitRecord);
    return result;
}

scene Scene(object[] o, int n_obj) {
    scene result = alloc(struct Scene);
    result->primitives = o;
    result->n_primitives = n_obj;
    result->last_hit = alloc(object);
    return result;
}

// surface Surface(vector a, vector b, vector c) {
//     surface result = alloc(struct Surface);
//     result->a = a;
//     result->b = b;
//     result->c = c;
//     return result;
// }
