#use "vector.c0"
#use "math.c0"
#use "geometry.c0"
#use <util>
#use <conio>
#use "drand.c0"

typedef struct Ray* ray;

struct Ray {
    vector origin;
    vector direction;
};

ray Ray(vector o, vector d) {
    ray result = alloc(struct Ray);
    result->origin = o;
    result->direction = d;
    return result;
}

vector point_at_param(ray r, double p) {
    return vadd(cprm(r->direction, p), r->origin);
}

// Lambertian Random Vector
vector rand_in_usphere(rand_t gen) {
    vector p = iVector(1, 1, 1);
    while (true) {
        p = vsub(cprm(Vector(drand(gen), drand(gen), drand(gen)), itod(2)), iVector(1, 1, 1));
        if (! dless(itod(1), pow_n(vlen(p), 2)) ) {
            return p;
        }
    }
    return p;
}

// Checks if a Sphere-Object `s` is hit by the Ray `r`.
bool hit_sphere(object s, ray r, double t_min, double t_max) {
    vector center = s->pos1; double radius = s->mod;
    vector oc = vsub(r->origin, center);
    double a = vector_dot(r->direction, r->direction);
    double b = vector_dot(oc, r->direction);
    double c = dsub(vector_dot(oc, oc), dmul(radius, radius));
    double discr = dsub(pow_n(b, 2), dmul(a, c));
    if (!dless(discr, itod(0))) {
        double temp =  ddiv(dsub(dsub(itod(0), b), sqrt(dsub(pow_n(b, 2), dmul(a, c)))), a);
        if (dless(temp, t_max) && dless(t_min, temp)) {
            s->hit->t = temp;
            s->hit->p = point_at_param(r, temp);
            s->hit->n = cprm(vsub(s->hit->p, s->pos1), ddiv(itod(1), s->mod));
            return true;
        }
        temp = ddiv(dadd(dsub(itod(0), b), sqrt(dsub(pow_n(b, 2), dmul(a, c)))), a);
        if (dless(temp, t_max) && dless(t_min, temp)) {
            s->hit->t = temp;
            s->hit->p = point_at_param(r, temp);
            s->hit->n = cprm(vsub(s->hit->p, s->pos1), ddiv(itod(1), s->mod));
            return true;
        }
    }
    return false;
}

bool hit_triangle(object t, ray r, double t_min, double t_max) {
    vector v0 = t->pos1;
    vector v1 = t->pos2;
    vector v2 = t->pos3;
    vector dir = r->direction;
    vector orig = r->origin;
    double kEpsilon = dfloat(1, 8);

    // compute plane's normal
    vector v0v1 = vsub(v1, v0); 
    vector v0v2 = vsub(v2, v0); 
    // no need to normalize

    // no need to normalize
    vector N = vector_cross(v0v1, v0v2); // N 
    t->hit->n = cprm(triangle_norm_dir(t, r->direction), itod(-1));
    /*@assert dless(vector_dot(N, v0v1), kEpsilon); @*/
    double area2 = vlen(N); 
 
    // Step 1: finding P
 
    // check if ray and plane are parallel ?
    double NdotRayDirection = vector_dot(N, dir); 
    if (dless(dabs(NdotRayDirection), kEpsilon)) // almost 0
        return false; // they are parallel so they don't intersect ! 

    // compute d parameter using equation 2
    double d = vector_dot(N, v0); 
 
    // compute t (equation 3)
    t->hit->t = ddiv(dadd(vector_dot(N, orig), d), dmul(NdotRayDirection, itod(-1))); 
    // check if the triangle is in behind the ray
    if (dless(t->hit->t, itod(0))) return false; // the triangle is behind 
 
    // compute the intersection point using equation 1
    vector P = vadd(orig, cprm(dir, t->hit->t)); 

    t->hit->p = P;
 
    // Step 2: inside-outside test
    vector C; // vector perpendicular to triangle's plane 
 
    // edge 0
    vector edge0 = vsub(v1, v0); 
    vector vp0 = vsub(P, v0); 
    C = vector_cross(edge0, vp0); 
    if (dless(vector_dot(N, C), itod(0))) return false; // P is on the right side 
 
    // edge 1
    vector edge1 = vsub(v2, v1); 
    vector vp1 = vsub(P, v1); 
    C = vector_cross(edge1, vp1); 
    if (dless(vector_dot(N, C), itod(0)))  return false; // P is on the right side 
 
    // edge 2
    vector edge2 = vsub(v0, v2); 
    vector vp2 = vsub(P, v2); 
    C = vector_cross(edge2, vp2); 
    if (dless(vector_dot(N, C), itod(0))) return false; // P is on the right side; 
 
    return true; // this ray hits the triangle 
}

bool hit(scene world, ray r, double t_min, double t_max) {
    bool hit_anything = false;
    double closest    = t_max;
    for (int el = 0; el < world->n_primitives; el++) {
        // Sphere
        if (world->primitives[el]->obj_type == 0) {
            if (hit_sphere(world->primitives[el], r, t_min, closest)) {
                hit_anything = true;
                closest = world->primitives[el]->hit->t;
                *world->last_hit = world->primitives[el];
            }
        }
        if (world->primitives[el]->obj_type == 1) {
            if (hit_triangle(world->primitives[el], r, t_min, closest)) {
                hit_anything = true;
                closest = world->primitives[el]->hit->t;
                *world->last_hit = world->primitives[el];
            }
        }
    }
    return hit_anything;
}

// Lighting and so on //
// Global Lighting
vector global_lighting(ray r, vector light) {
    vector unit_dir = unit_vector(r->direction);
    double t = vector_dot(unit_dir, unit_vector(light));
    t = dless(itod(0), t) ? t : itod(0);
    t = dless(t, itod(1)) ? t : itod(1);
    return vadd(
        cprm(
            Vector(dfloat(3, 1), dfloat(3, 1), dfloat(3, 1)),
            dmul(t, itod(255))
        ),
        cprm(
            iVector(1, 1, 1),
            dmul(dsub(itod(1), t), itod(255))
        )
    );
}

void get_sphere_uv(vector p, double* u, double* v){
	*u = norm_atan2(p->z, p->x);
    double y = unit_vector(p)->y;
    y = dless(itod(-1), y) || y == itod(-1) ? y : itod(-1);
    y = dless(y,  itod(1)) || y == itod( 1) ? y : itod( 1);
    *v = ddiv(dadd(y, itod(1)), itod(2));
}
// Background
vector background(ray r, scene s) {
    vector unit_dir = unit_vector(r->direction);
    double* xd = alloc(double);
    double* yd = alloc(double);
    get_sphere_uv(unit_dir, xd, yd);
    /*@assert dless(itod(0), *xd) || *xd == itod(0); @*/
    /*@assert dless(*xd, itod(1)) || *xd == itod(1); @*/
    /*@assert dless(itod(0), *yd) || *yd == itod(0); @*/
    /*@assert dless(*yd, itod(1)) || *yd == itod(1); @*/
    int xp = dtoi(dmul(*xd, itod(s->bgw - 1)));
    int yp = dtoi(dmul(*yd, itod(s->bgh - 1)));
    yp = yp < 0 ? 0 : yp;
    yp = yp > s->bgh ? s->bgh-1 : yp;
    /*@assert xp < \length(s->bg[0]); @*/
    /*@assert yp < \length(s->bg); @*/
    return vector_from_color(iColor(s->bg[yp][xp]));
}

// Recursive Function to calculate random Ray Color
vector ray_color(ray r, scene s, rand_t gen, bool trace, int depth, int max_depth) {
    if (hit(s, r, dfloat(1, 3), itod(int_max()))) {
        bool next_trace = (*s->last_hit)->surface->type == 0;
        vector target;
        if (next_trace) {
            target = (
                vadd(rand_in_usphere(gen), (*s->last_hit)->hit->n)
            );
        } else {
            target = vadd(
                vsub(
                    unit_vector(r->direction), 
                    cprm(
                        (*s->last_hit)->hit->n, 
                        dmul(
                            itod(2), 
                            vector_dot(unit_vector(r->direction), (*s->last_hit)->hit->n)
                        )
                    )
                ),
                cprm(rand_in_usphere(gen), (*s->last_hit)->surface->fuzz)
            );
        }
        if (depth < max_depth) {
            vector ray_col = ray_color(
                Ray(
                    (*s->last_hit)->hit->p,
                    target
                ),
                s,
                gen,
                next_trace,
                depth + 1,
                max_depth
            );
            ray_col = cprm(
                cprm(
                    gamma_adjust(
                        cprm(
                            ray_col,
                            frac(1, 256)
                        ),
                        inv((*s->last_hit)->surface->reflection)
                    ),
                    frac(256, 1)
                ),
                (*s->last_hit)->surface->reflection
            );
            return TintVector(ray_col, (*s->last_hit)->surface->tint);
        } else {
            return background(r, s);
        }
    } else if (!trace) {
        return background(r, s);
    } else {
        return background(r, s);
    }
}